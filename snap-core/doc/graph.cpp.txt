/// [TUNGraph::AddNode]
Return value is the ID of the node being added.
If NId=-1 node id will be automatically assigned (and returned).
If node of ID NId already exists, do nothing.
///

/// [TUNGraph::AddNode-1]
Function can create inconsistent graphs unless the neighboring nodes (in NbhNIdV vector)
are also explicitly added to the graph.
Use TUNGraph::IsOk to check that the resulting graph is consistent.
Return value is the ID of the node being added.
If node NId already exists the function aborts.
///

/// [TUNGraph::AddNode-2]
Function can create inconsistent graphs unless the neighboring nodes (stored in the vector)
are also explicitly added to the graph.
Use TUNGraph::IsOk to check that the resulting graph is consistent.
Return value is the ID of the node being added.
If node NId already exists the function aborts.
///

/// [TUNGraph::DelNode]
If the node of ID NId does not exist the function aborts.
///

/// [TUNGraph::AddEdge]
If the edge already exists return -2. If the edge was successfully added return -1.
Normally the function should return an ID of the edge added but since edges in TUNGraph have no IDs we return -1.
Function aborts if SrcNId or DstNId are not nodes in the graph.
///

/// [TUNGraph::DelEdge]
If the edge (SrcNId, DstNId) does not exist in the graph function still completes.
But the function aborts if SrcNId or DstNId are not nodes in the graph.
///

/// [TUNGraph::GetEI]
Note that since this is an undirected graph GetEI(SrcNId, DstNId) has the same effect as GetEI(DstNId, SrcNId).
///

/// [TUNGraph::Defrag]
After performing many node and edge insertions and deletions to a graph,
the graph data structure will be fragmented in memory.
This function compacts down the graph data structure and frees unneeded memory.
///

/// [TUNGraph::IsOk]
For each node in the graph check that its neighbors are also nodes in the graph.
///

